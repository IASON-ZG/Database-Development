\\------------------------1ST QUERY-------------------//

NO INDEX:
-----------------------------------------------------------------------------------------
HashAggregate  (cost=3273.70..3337.33 rows=6363 width=12) (actual time=16.918..17.896 rows=6363 loops=1)
Group Key: host.id
  ->  Hash Join  (cost=255.26..3215.99 rows=11541 width=4) (actual time=1.694..13.909 rows=11541 loops=1)
        Hash Cond: (listing2.host_id = host.id)
        ->  Seq Scan on listing2  (cost=0.00..2930.41 rows=11541 width=4) (actual time=0.021..9.331 rows=11541 loops=1)
        ->  Hash  (cost=175.73..175.73 rows=6363 width=4) (actual time=1.622..1.623 rows=6363 loops=1)
              Buckets: 8192  Batches: 1  Memory Usage: 288kB
              ->  Index Only Scan using host_pkey on host  (cost=0.28..175.73 rows=6363 width=4) (actual time=0.009..0.728 rows=6363 loops=1)
                    Heap Fetches: 0
Planning Time: 12.523 ms
Execution Time: 18.583 ms

INDEX:
-----------------------------------------------------------------------------------------
HashAggregate  (cost=652.69..716.32 rows=6363 width=12) (actual time=7.564..8.479 rows=6363 loops=1)
  Group Key: host.id
  ->  Hash Join  (cost=255.55..594.98 rows=11541 width=4) (actual time=1.840..5.070 rows=11541 loops=1)
        Hash Cond: (listing2.host_id = host.id)
        ->  Index Only Scan using first_query on listing2  (cost=0.29..309.40 rows=11541 width=4) (actual time=0.010..1.085 rows=11541 loops=1)
              Heap Fetches: 0
        ->  Hash  (cost=175.73..175.73 rows=6363 width=4) (actual time=1.761..1.761 rows=6363 loops=1)
              Buckets: 8192  Batches: 1  Memory Usage: 288kB
              ->  Index Only Scan using host_pkey on host  (cost=0.28..175.73 rows=6363 width=4) (actual time=0.024..0.716 rows=6363 loops=1)
                    Heap Fetches: 0
Planning Time: 51.446 ms
Execution Time: 8.808 ms

/* Query 1: w/out index: 18.583 ms; w/index: 8.808 ms */


\\------------------------2ND QUERY-------------------//

NO INDEX :
-----------------------------------------------------------------------------------------
Nested Loop  (cost=0.29..19429.97 rows=1500330 width=12) (actual time=0.059..292.289 rows=2469774 loops=1)
  ->  Index Only Scan using listings2_pkey on listing2  (cost=0.29..329.40 rows=11541 width=4) (actual time=0.022..2.130 rows=11541 loops=1)
        Heap Fetches: 0
  ->  Materialize  (cost=0.00..346.76 rows=130 width=8) (actual time=0.000..0.008 rows=214 loops=11541)
        ->  Seq Scan on price  (cost=0.00..346.12 rows=130 width=8) (actual time=0.033..1.494 rows=214 loops=1)
              Filter: ((guests_included > 5) AND (price > '40'::double precision))
              Rows Removed by Filter: 11327
Planning Time: 5.405 ms
Execution Time: 336.152 ms


INDEX:
-----------------------------------------------------------------------------------------
Nested Loop  (cost=0.57..19091.67 rows=1500330 width=12) (actual time=12.519..307.332 rows=2469774 loops=1)
  ->  Index Only Scan using listings2_pkey on listing2  (cost=0.29..329.40 rows=11541 width=4) (actual time=0.016..2.181 rows=11541 loops=1)
        Heap Fetches: 0
  ->  Materialize  (cost=0.29..8.46 rows=130 width=8) (actual time=0.001..0.009 rows=214 loops=11541)
        ->  Index Only Scan using second_query on price  (cost=0.29..7.82 rows=130 width=8) (actual time=12.498..12.526 rows=214 loops=1)
              Index Cond: ((guests_included > 5) AND (price > '40'::double precision))
              Heap Fetches: 0
Planning Time: 6.367 ms
Execution Time: 351.650 ms


/* Query 2: w/out index: 336.152 ms; w/index: 351.650 ms */

Comments:
Για το συγκεκριμένο query τεστάραμε τέσσερα διαφορετικά indexes απο τα οποία κανένα δεν βοήθησε στην επιτάχυνση της αναζήτησης 






\\------------------------3RD QUERY(1st Excersise 5)-------------------//


NO INDEX :
-----------------------------------------------------------------------------------------
QUERY PLAN
HashAggregate  (cost=3316.90..3396.44 rows=2121 width=12) (actual time=20.327..20.901 rows=81 loops=1)
  Group Key: host.id
  Filter: (count(listing2.id) > 10)
  Rows Removed by Filter: 5825
  ->  Hash Join  (cost=255.26..3241.09 rows=10109 width=8) (actual time=1.603..17.309 rows=10109 loops=1)
        Hash Cond: (listing2.host_id = host.id)
        ->  Seq Scan on listing2  (cost=0.00..2959.26 rows=10109 width=8) (actual time=0.023..13.619 rows=10109 loops=1)
              Filter: ((room_type)::text = 'Entire home/apt'::text)
              Rows Removed by Filter: 1432
        ->  Hash  (cost=175.73..175.73 rows=6363 width=4) (actual time=1.532..1.532 rows=6363 loops=1)
              Buckets: 8192  Batches: 1  Memory Usage: 288kB
              ->  Index Only Scan using host_pkey on host  (cost=0.28..175.73 rows=6363 width=4) (actual time=0.016..0.681 rows=6363 loops=1)
                    Heap Fetches: 0
Planning Time: 43.133 ms
Execution Time: 21.425 ms


INDEX :
-----------------------------------------------------------------------------------------
QUERY PLAN
HashAggregate  (cost=3139.40..3218.94 rows=2121 width=12) (actual time=16.265..16.914 rows=81 loops=1)
  Group Key: host.id
  Filter: (count(listing2.id) > 10)
  Rows Removed by Filter: 5825
  ->  Hash Join  (cost=255.55..3063.58 rows=10109 width=8) (actual time=1.724..13.375 rows=10109 loops=1)
        Hash Cond: (listing2.host_id = host.id)
        ->  Index Scan using third_query on listing2  (cost=0.29..2781.76 rows=10109 width=8) (actual time=0.017..9.492 rows=10109 loops=1)
        ->  Hash  (cost=175.73..175.73 rows=6363 width=4) (actual time=1.631..1.632 rows=6363 loops=1)
              Buckets: 8192  Batches: 1  Memory Usage: 288kB
              ->  Index Only Scan using host_pkey on host  (cost=0.28..175.73 rows=6363 width=4) (actual time=0.021..0.811 rows=6363 loops=1)
                    Heap Fetches: 0
Planning Time: 0.415 ms
Execution Time: 17.374 ms


/* Query 3: w/out index: 21.425 ms; w/index: 17.374 ms */

COMMENTS: 
Παρατηρήσαμε πως με την δημιουργία ενός index χωρίς το condition του room type το query συνέχισε να κάνει seq scan στον πίνακα Listing2
που σημαίνει πως ηταν "οικονομικότερο" για το query να "ψάχνει" απευθείας στον πίνακα Listings2 παρά να χρησιμοποιεί το index άρα για αυτόν το
λόγο προσθέσαμε και το condition




\\------------------------4TH QUERY(2st Excersise 5)-------------------//

NO INDEX :
-----------------------------------------------------------------------------------------
Sort  (cost=9544.26..9553.88 rows=3847 width=12) (actual time=602.971..603.924 rows=9710 loops=1)
  Sort Key: (count(amenitytoroom.amenity_id)) DESC
  Sort Method: quicksort  Memory: 840kB
  ->  Finalize HashAggregate  (cost=9170.92..9315.18 rows=3847 width=12) (actual time=596.565..600.146 rows=9710 loops=1)
        Group Key: room.id
        Filter: (count(amenitytoroom.amenity_id) > 15)
        Rows Removed by Filter: 1831
        ->  Gather  (cost=7814.85..9084.36 rows=11541 width=12) (actual time=202.746..608.899 rows=11541 loops=1)
              Workers Planned: 1
              Workers Launched: 1
              ->  Partial HashAggregate  (cost=6814.85..6930.26 rows=11541 width=12) (actual time=100.168..101.279 rows=5771 loops=2)
                    Group Key: room.id
                    ->  Hash Join  (cost=377.67..5927.51 rows=177467 width=8) (actual time=3.303..65.442 rows=150847 loops=2)
                          Hash Cond: (amenitytoroom.id = room.id)
                          ->  Parallel Seq Scan on amenitytoroom  (cost=0.00..3109.67 rows=177467 width=8) (actual time=0.008..13.077 rows=150847 loops=2)
                          ->  Hash  (cost=233.41..233.41 rows=11541 width=4) (actual time=6.419..6.419 rows=11541 loops=1)
                              Buckets: 16384  Batches: 1  Memory Usage: 534kB
                                ->  Seq Scan on room  (cost=0.00..233.41 rows=11541 width=4) (actual time=0.039..3.133 rows=11541 loops=1)
Planning Time: 31.120 ms
Execution Time: 622.160 ms

INDEX :
-----------------------------------------------------------------------------------------

ΔΕΝ ΒΡΈΘΗΚΕ INDEX ΠΟΥ ΝΑ ΕΠΙΤΑΧΎΝΕΙ ΤΗΝ ΑΝΑΖΉΤΗΣΗ

COMMENTS:
Αφού το query δεν χρησιμοποιεί κάποια μεταβλητή ,εκτός απο τα id τα οποία είναι ήδη clustered index και το COUNT(amenitytoroom.amenity_id) το οποίο δεν μπορεί να χρησιμοποιηθεί σε index , δεν υπάρχει
περιθώριο για βελτίωση.






\\------------------------5TH QUERY(3st Excersise 5)-------------------//

NO INDEX :
-----------------------------------------------------------------------------------------
HashAggregate  (cost=51896.75..51897.20 rows=45 width=37) (actual time=1064.874..1064.879 rows=45 loops=1)
  Group Key: location.neighbourhood_cleansed
  ->  Hash Left Join  (cost=618.17..37410.96 rows=2897158 width=33) (actual time=3.826..436.888 rows=2897159 loops=1)
        Hash Cond: ((location.neighbourhood)::text = (host.neighbourhood)::text)
        ->  Seq Scan on location  (cost=0.00..348.41 rows=11541 width=38) (actual time=0.018..1.796 rows=11541 loops=1)
        ->  Hash  (cost=538.63..538.63 rows=6363 width=13) (actual time=3.789..3.789 rows=4923 loops=1)
              Buckets: 8192  Batches: 1  Memory Usage: 282kB
              ->  Seq Scan on host  (cost=0.00..538.63 rows=6363 width=13) (actual time=0.009..2.765 rows=6363 loops=1)
Planning Time: 5.842 ms
Execution Time: 1065.045 ms



INDEX:(To 1o)
-----------------------------------------------------------------------------------------

QUERY PLAN
Finalize GroupAggregate  (cost=25247.93..25253.78 rows=45 width=37) (actual time=2511.766..2511.818 rows=45 loops=1)
  Group Key: location.neighbourhood_cleansed
  ->  Gather Merge  (cost=25247.93..25253.10 rows=45 width=37) (actual time=2511.760..2538.721 rows=73 loops=1)
        Workers Planned: 1
        Workers Launched: 1
        ->  Sort  (cost=24247.92..24248.03 rows=45 width=37) (actual time=2296.908..2296.911 rows=37 loops=2)
              Sort Key: location.neighbourhood_cleansed
              Sort Method: quicksort  Memory: 28kB
              Worker 0:  Sort Method: quicksort  Memory: 27kB
              ->  Partial HashAggregate  (cost=24246.23..24246.68 rows=45 width=37) (actual time=2296.669..2296.678 rows=37 loops=2)
                    Group Key: location.neighbourhood_cleansed
                    ->  Nested Loop Left Join  (cost=0.57..15725.18 rows=1704211 width=33) (actual time=4.516..1229.347 rows=1448580 loops=2)
                          ->  Parallel Index Only Scan using fifth_query_2 on location  (cost=0.29..485.88 rows=6789 width=38) (actual time=4.232..8.364 rows=5771 loops=2)
                                Heap Fetches: 0
                          ->  Index Only Scan using fifth_query on host  (cost=0.28..1.53 rows=71 width=13) (actual time=0.017..0.148 rows=251 loops=11541)
                                Index Cond: (neighbourhood = (location.neighbourhood)::text)
                                Heap Fetches: 0
Planning Time: 8.899 ms
Execution Time: 2538.896 ms


/* Query 5: w/out index: 1065.045 ms; w/index: 2538.896 ms */

Comments:
Απο ότι βλέπουμε η δημιουργία των index οχι μόνο δεν μείωσαν τον χρόνο του query αλλα το υπερδιπλασίασαν.




\\------------------------6TH QUERY(4rth Excersise 5)-------------------//

NO INDEX :
-----------------------------------------------------------------------------------------
Sort  (cost=679.94..680.02 rows=31 width=45) (actual time=3.739..3.739 rows=38 loops=1)
  Sort Key: room.price
  Sort Method: quicksort  Memory: 27kB
  ->  Hash Join  (cost=270.78..679.17 rows=31 width=45) (actual time=1.597..3.664 rows=38 loops=1)
        Hash Cond: (location.id = room.id)
        ->  Seq Scan on location  (cost=0.00..406.12 rows=526 width=33) (actual time=0.026..2.085 rows=531 loops=1)
              Filter: (((neighbourhood_cleansed)::text = 'ΖΑΠΠΕΙΟ'::text) OR ((neighbourhood_cleansed)::text = 'ΑΚΡΟΠΟΛΗ'::text))
              Rows Removed by Filter: 11010
        ->  Hash  (cost=262.26..262.26 rows=681 width=16) (actual time=1.510..1.511 rows=681 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 43kB
              ->  Seq Scan on room  (cost=0.00..262.26 rows=681 width=16) (actual time=0.013..1.389 rows=681 loops=1)
                    Filter: (beds > 4)
                    Rows Removed by Filter: 10860
Planning Time: 24.199 ms
Execution Time: 3.784 ms


INDEX :
-----------------------------------------------------------------------------------------
QUERY PLAN
Sort  (cost=419.71..419.78 rows=31 width=45) (actual time=1.052..1.054 rows=38 loops=1)
  Sort Key: room.price
  Sort Method: quicksort  Memory: 27kB
  ->  Hash Join  (cost=175.69..418.94 rows=31 width=45) (actual time=0.710..1.032 rows=38 loops=1)
        Hash Cond: (location.id = room.id)
        ->  Bitmap Heap Scan on location  (cost=20.82..261.78 rows=526 width=33) (actual time=0.112..0.380 rows=531 loops=1)
              Recheck Cond: (((neighbourhood_cleansed)::text = 'ΖΑΠΠΕΙΟ'::text) OR ((neighbourhood_cleansed)::text = 'ΑΚΡΟΠΟΛΗ'::text))
              Heap Blocks: exact=211
              ->  BitmapOr  (cost=20.82..20.82 rows=531 width=0) (actual time=0.072..0.072 rows=0 loops=1)
                    ->  Bitmap Index Scan on sixth_query_1  (cost=0.00..5.37 rows=145 width=0) (actual time=0.033..0.033 rows=145 loops=1)
                          Index Cond: ((neighbourhood_cleansed)::text = 'ΖΑΠΠΕΙΟ'::text)
                    ->  Bitmap Index Scan on sixth_query_1  (cost=0.00..15.18 rows=386 width=0) (actual time=0.039..0.039 rows=386 loops=1)
                          Index Cond: ((neighbourhood_cleansed)::text = 'ΑΚΡΟΠΟΛΗ'::text)
        ->  Hash  (cost=146.36..146.36 rows=681 width=16) (actual time=0.582..0.582 rows=681 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 43kB
              ->  Bitmap Heap Scan on room  (cost=19.85..146.36 rows=681 width=16) (actual time=0.068..0.481 rows=681 loops=1)
                    Recheck Cond: (beds > 4)
                    Heap Blocks: exact=117
                    ->  Bitmap Index Scan on sixth_query_2  (cost=0.00..19.68 rows=681 width=0) (actual time=0.053..0.053 rows=681 loops=1)
Planning Time: 10.779 ms
Execution Time: 1.126 ms



/* Query 6: w/out index: 3.784 ms; w/index: 1.126 ms */
Comments:
Παρατηρούμε πως τα δυο κριτήρια με τα οποία κάνουμε την αναζήτηση ειναι το neighbourhood_cleansed του Location και το beds του Room και κάνουμε join στα id τους. Αρχικά 
παρατηρήσαμε πως ένα απλό index στο Room με columns το beds,id δεν απέτρεπε το πρόγραμμα απο το να κάνει seq scan στον πίνακα Room ακόμα και με το index οπότε αλλάξαμε το index σε partial προσθέτοντας το condition
οπού παρατηρούμε και απο τα δεδομένα πως πλέον χρησιμοποιείται index scan.






\\------------------------7TH QUERY(5th Excersise 5)-------------------//

NO INDEX:
-----------------------------------------------------------------------------------------
HashAggregate  (cost=450.15..450.60 rows=45 width=29) (actual time=4.648..4.649 rows=3 loops=1)
  Group Key: geolocation.properties_neighbourhood
  ->  Hash Left Join  (cost=9.01..448.50 rows=329 width=25) (actual time=0.221..4.501 rows=332 loops=1)
        Hash Cond: ((location.neighbourhood_cleansed)::text = (geolocation.properties_neighbourhood)::text)
        ->  Seq Scan on location  (cost=0.00..434.97 rows=329 width=33) (actual time=0.051..4.126 rows=332 loops=1)
              Filter: (((neighbourhood_cleansed)::text = 'ΓΟΥΔΙ'::text) OR ((neighbourhood_cleansed)::text = 'ΓΟΥΒΑ'::text) OR ((neighbourhood_cleansed)::text = 'ΓΚΑΖΙ'::text))
              Rows Removed by Filter: 11209
        ->  Hash  (cost=8.45..8.45 rows=45 width=21) (actual time=0.159..0.160 rows=45 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 11kB
              ->  Seq Scan on geolocation  (cost=0.00..8.45 rows=45 width=21) (actual time=0.067..0.130 rows=45 loops=1)
Planning Time: 0.468 ms
Execution Time: 4.764 ms

INDEX:
-----------------------------------------------------------------------------------------
HashAggregate  (cost=285.52..285.97 rows=45 width=29) (actual time=0.710..0.710 rows=3 loops=1)
  Group Key: geolocation.properties_neighbourhood
  ->  Hash Left Join  (cost=28.60..283.88 rows=329 width=25) (actual time=0.355..0.645 rows=332 loops=1)
        Hash Cond: ((location.neighbourhood_cleansed)::text = (geolocation.properties_neighbourhood)::text)
        ->  Bitmap Heap Scan on location  (cost=19.59..270.34 rows=329 width=33) (actual time=0.282..0.487 rows=332 loops=1)
              Recheck Cond: (((neighbourhood_cleansed)::text = 'ΓΟΥΔΙ'::text) OR ((neighbourhood_cleansed)::text = 'ΓΟΥΒΑ'::text) OR ((neighbourhood_cleansed)::text = 'ΓΚΑΖΙ'::text))
              Heap Blocks: exact=181
              ->  BitmapOr  (cost=19.59..19.59 rows=332 width=0) (actual time=0.258..0.258 rows=0 loops=1)
                    ->  Bitmap Index Scan on seventh_query_1  (cost=0.00..9.61 rows=176 width=0) (actual time=0.207..0.207 rows=176 loops=1)
                          Index Cond: ((neighbourhood_cleansed)::text = 'ΓΟΥΔΙ'::text)
                    ->  Bitmap Index Scan on seventh_query_1  (cost=0.00..4.73 rows=59 width=0) (actual time=0.013..0.013 rows=59 loops=1)
                          Index Cond: ((neighbourhood_cleansed)::text = 'ΓΟΥΒΑ'::text)
                    ->  Bitmap Index Scan on seventh_query_1  (cost=0.00..5.01 rows=97 width=0) (actual time=0.037..0.037 rows=97 loops=1)
                          Index Cond: ((neighbourhood_cleansed)::text = 'ΓΚΑΖΙ'::text)
        ->  Hash  (cost=8.45..8.45 rows=45 width=21) (actual time=0.063..0.063 rows=45 loops=1)
              Buckets: 1024  Batches: 1  Memory Usage: 11kB
              ->  Seq Scan on geolocation  (cost=0.00..8.45 rows=45 width=21) (actual time=0.014..0.048 rows=45 loops=1)
Planning Time: 9.191 ms
Execution Time: 0.819 ms

/* Query 7: w/out index: 4.764 ms; w/index: 0.819 ms */

Comments:
Παρατηρήσαμε πως για το συγκεκριμένο query κάναμε αναζήτηση με βάση το neighbourhood_cleansed του table Location το οποίο δεν αποτελεί primary key
άρα ενα index στα columnds (neighbourhood_cleansed,id) επιτρέπει index scan αντί για seq scan.






